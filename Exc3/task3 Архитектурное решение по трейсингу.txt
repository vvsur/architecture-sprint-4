### Анализ системы и планирование трейсинга

#### **Мотивация**

Трейсинг играет ключевую роль в обеспечении наблюдаемости (observability) сложных систем, особенно при необходимости быстрого реагирования на проблемы, такие как потеря заказов. Внедрение трейсинга:

1. **Экономия ресурсов:** Реализация трейсинга обходится дешевле, чем полноценное логирование всех процессов, так как не требует сбора и хранения больших объемов данных.
2. **Прозрачность процессов:** OpenTelemetry предоставляет ясное и структурированное представление о прохождении запросов через систему, повышая общую прозрачность.
3. **Гибкость и масштабируемость:** Использование OpenTelemetry позволяет адаптировать решение под конкретные нужды компании, а также интегрироваться с другими инструментами мониторинга и логирования.
4. **Реакция на текущие вызовы:** Потери заказов требуют быстрого обнаружения и устранения проблемных мест. Трейсинг позволяет сосредоточиться на критически важных точках.
5. **Поддержка open-source:** OpenTelemetry – бесплатный инструмент с открытым исходным кодом, который активно поддерживается сообществом.

---

### **Предлагаемое решение**

Для внедрения трейсинга в существующую систему компании предлагается следующая конфигурация:

#### **Технологический стек:**
- **OpenTelemetry:** Для генерации и экспорта данных о трейсах.
- **Jaeger:** Для визуализации и анализа трейсинга.

#### **Основные элементы трейсинга:**
1. **Span:**
   - Содержит имя процесса или задачи.
   - Включает данные о времени выполнения, идентификаторе системы, метаданные (например, атрибуты о запросах).
   - Логин пользователя из сертификата должен исключать любые персональные данные.

2. **Child spans:** 
   - Представляют дочерние операции. Например, ответ MES на запрос из CRM.

3. **Уникальный идентификатор (traceId):**
   - Генерируется при входе запроса в систему и используется для отслеживания всех этапов обработки.

#### **Архитектура:**
1. Библиотека OpenTelemetry подключается к приложениям (Интернет-магазин, CRM, MES, API и RabbitMQ).
2. Трейсы передаются в **Jaeger Collector**, где сохраняются в базе данных.
3. Данные визуализируются через **Jaeger UI**, что позволяет анализировать цепочки запросов.

#### **Пример использования:**
- Запрос начинается с Интернет-магазина и передается в CRM, а затем в MES. Каждый сервис добавляет информацию о времени обработки и статусе выполнения.
- Дочерние spans фиксируют данные на каждом этапе обработки запроса.

---

### **Компромиссы**

1. **Единая система идентификации запросов:**
   - Предлагается использовать унифицированные requestId, которые генерируются на уровне фронтенда или API и передаются через всю цепочку обработки.
   - Проблемы могут возникнуть, если проприетарные системы жестко формируют requestId. В таком случае придется адаптироваться под их формат.

2. **Ограниченные возможности ручного трейсинга:**
   - Автоматизированный трейсинг упрощает анализ, но не всегда охватывает все возможные сценарии. Возможна необходимость добавления отдельных логов для критически важных точек.

3. **Зависимость от внедрения:** 
   - Для работы трейсинга потребуется договоренность между всеми участниками процесса и настройка единого подхода, что может быть сложно в условиях мультисистемной среды.

---

### **Аспекты безопасности**

1. **Ограничение доступа:**
   - Доступ к данным трейсинга должны иметь только сотрудники сервисной службы, администраторы и специалисты по информационной безопасности (ИБ).

2. **Аутентификация и авторизация:**
   - Рекомендуется использовать **Active Directory**, **LDAP** или **Keycloak (SSO)** для управления доступом.
   - Это исключает необходимость ручного создания учетных записей, минимизируя риски и упрощая управление доступами.

3. **Соответствие регламентам ИБ:**
   - Использование внутренних учетных записей требует разработки множества регламентов и согласований, что увеличивает временные и трудовые затраты. Решения на основе SSO позволяют автоматизировать этот процесс.

---

### **Цепочка трейсинга в C4-контексте**

#### **Контекст системы (Level 1):**
- Основная проблема сосредоточена в цепочке Интернет-магазин → CRM → MES.
- Трейсинг охватывает взаимодействие этих систем, включая API и RabbitMQ.

#### **Контейнерный уровень (Level 2):**
- Включает все приложения (Интернет-магазин, CRM, MES) и инфраструктурные компоненты (RabbitMQ, PostgreSQL).
- OpenTelemetry собирает данные из каждого контейнера и передает их в Jaeger Collector.

#### **Компонентный уровень (Level 3):**
- Основное внимание уделяется API и очередям сообщений.
- Каждый компонент добавляет свои данные в span, фиксируя время обработки и статус.

---

### **Преимущества трейсинга на основе OpenTelemetry**

1. **Снижение затрат:** Отслеживание критически важных процессов обходится дешевле, чем полное логирование.
2. **Повышение наблюдаемости:** Трейсинг обеспечивает ясную картину происходящего в системе.
3. **Гибкость:** OpenTelemetry позволяет адаптировать трейсинг под конкретные нужды бизнеса.
4. **Визуализация:** Jaeger предоставляет удобный интерфейс для анализа трейсинга.
5. **Улучшение безопасности:** Контролируемый доступ к данным минимизирует риски утечек.

---

### **Следующие шаги**

1. Внедрить библиотеку OpenTelemetry во все приложения.
2. Настроить Jaeger Collector и базу данных для хранения трейсинговой информации.
3. Обеспечить доступность данных через Jaeger UI.
4. Разработать регламенты доступа и настройки авторизации на основе SSO.
5. Провести обучение сотрудников для эффективного использования трейсинга. 

Внедрение трейсинга позволит компании лучше понимать и управлять своими системами, снизить вероятность потерь заказов и повысить общую эффективность работы.