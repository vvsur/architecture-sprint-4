### Анализ системы и планирование трейсинга

---

#### **Мотивация**

Трейсинг обеспечивает полную прозрачность и контроль за прохождением запросов через систему. Это особенно важно в условиях сложных мультисистемных архитектур. Внедрение трейсинга позволит:

1. **Идентифицировать узкие места:**
   - Определять, где происходят задержки, потери заказов или ошибки.
2. **Повысить наблюдаемость:**
   - Отслеживать все критические процессы с минимальными затратами на хранение данных.
3. **Реагировать на проблемы:**
   - Быстро находить и устранять сбои в работе системы.
4. **Обеспечить поддержку бизнес-задач:**
   - Улучшить клиентский опыт за счет оптимизации времени обработки заказов.

---

### **Системы для трейсинга (Схема C4)**

На текущей архитектуре системы (C4) для трейсинга будут выделены следующие элементы:

#### **Контекст системы (Level 1):**
- **Интернет-магазин:** Отслеживание заказов с момента их создания.
- **CRM:** Контроль за передачей данных между CRM и MES.
- **MES:** Время обработки заказа, расчет стоимости, передача статусов.
- **API:** Управление входящими и исходящими запросами.
- **RabbitMQ:** Передача сообщений между компонентами системы.
- **Базы данных (PostgreSQL):** Время записи и чтения данных, использование ресурсов.

#### **Контейнерный уровень (Level 2):**
- Компоненты:
  - Приложения: Интернет-магазин, CRM, MES.
  - Инфраструктура: RabbitMQ, PostgreSQL.
  - Мониторинговые инструменты: OpenTelemetry, Jaeger.

#### **Компонентный уровень (Level 3):**
- Основное внимание уделяется следующим компонентам:
  - Входящие запросы в API (HTTP, gRPC).
  - Очереди сообщений RabbitMQ.
  - Операции базы данных PostgreSQL.

---

### **Что будет отслеживаться**

1. **Жизненный цикл заказа:**
   - Время создания заказа.
   - Передача заказа в CRM.
   - Обработка в MES.
   - Возврат статуса в Интернет-магазин.

2. **Метрики выполнения:**
   - Время обработки запросов (latency).
   - Количество успешных и неуспешных запросов.
   - Время записи и чтения в базах данных.
   - Загрузка очередей RabbitMQ.

3. **Состояние систем:**
   - Загрузка компонентов (CPU, RAM).
   - Время выполнения отдельных операций (расчет стоимости, обновление статуса).

4. **Потери и сбои:**
   - Потерянные сообщения в RabbitMQ.
   - Задержки при обработке заказов в MES.
   - Ошибки при записи данных в базы.

---

### **Технологии и компоненты трейсинга**

1. **Технологический стек:**
   - **OpenTelemetry:** Для генерации и экспорта трейсинговых данных.
   - **Jaeger:** Для визуализации и анализа трейсинга.
   - **Prometheus/Grafana:** Для построения общей картины мониторинга.

2. **Основные элементы:**
   - **TraceId:** Уникальный идентификатор запроса.
   - **Span:** Описание операции (время выполнения, статус).
   - **Child spans:** Дочерние операции (передача данных, выполнение запроса).

3. **Интеграция компонентов:**
   - Приложения (Интернет-магазин, CRM, MES) подключаются к OpenTelemetry.
   - OpenTelemetry экспортирует данные в Jaeger Collector.
   - Данные хранятся в базе Jaeger и визуализируются через Jaeger UI.

---

### **Метрики трейсинга**

1. **Время выполнения запроса:**
   - Время от момента поступления запроса до завершения обработки.
2. **Время передачи данных:**
   - Между системами (API → RabbitMQ → CRM → MES).
3. **Общее время обработки заказа:**
   - Время от создания заказа до получения статуса клиентом.
4. **Количество ошибок:**
   - Ошибки в API, RabbitMQ, MES.
5. **Загрузка системы:**
   - Загрузка CPU, RAM для ключевых компонентов.
6. **Время обработки сообщений:**
   - RabbitMQ (отправка, обработка, dead-letter).
7. **Доля успешных запросов:**
   - HTTP 200/500.

---

### **План действий по внедрению трейсинга**

1. **Подготовить схему C4:**
   - Обозначить ключевые системы и точки трейсинга.
   - Выделить технологии и компоненты на схеме.
   - Разместить схему в Git для командного доступа.

2. **Внедрить OpenTelemetry:**
   - Настроить SDK для Интернет-магазина, CRM, MES и API.
   - Добавить трейсинг RabbitMQ и PostgreSQL.

3. **Настроить Jaeger:**
   - Подключить Jaeger Collector к OpenTelemetry.
   - Настроить базу данных для хранения трейсинговой информации.

4. **Обучение сотрудников:**
   - Провести тренинг для разработки и эксплуатации систем.

5. **Запуск трейсинга:**
   - Провести тестирование трейсинга.
   - Внедрить в продакшн.

---

Внедрение трейсинга повысит прозрачность и управляемость системы, позволит быстро находить и устранять проблемы, а также улучшит качество обслуживания клиентов. Это стратегическое решение, направленное на минимизацию рисков и повышение устойчивости бизнеса.