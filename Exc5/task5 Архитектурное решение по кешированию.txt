### Внедрение кэширования как способ повышения производительности системы

#### **Мотивация**

Кэширование является ключевым инструментом для оптимизации производительности систем, особенно в случаях с высокой нагрузкой на базу данных и интерфейсы, такие как MES. 

**Основные преимущества кэширования:**
1. **Увеличение производительности:** 
   - Кэш позволяет значительно ускорить работу интерфейсов, снижая время отклика для операторов.
2. **Снижение нагрузки на базу данных:**
   - Вместо повторных обращений к БД за одним и тем же набором данных, система использует кэш.
3. **Прогнозируемая производительность:**
   - Кэширование помогает минимизировать задержки в периоды пиковых нагрузок.
4. **Решение проблем с отображением заказов:**
   - Ускоряет отображение списка заказов, даже если их количество постоянно растет.

---

### Анализ текущей ситуации

1. **Существующая архитектура:**
   - Реплицирование базы данных уже реализовано. Реплики обеспечивают быструю обработку запросов на чтение.
   - Однако даже с реплицированием нагрузка на систему остается высокой, особенно из-за необходимости обработки больших списков заказов.
   
2. **Необходимость кэширования:**
   - В случае, если репликация не дала ожидаемого результата, предлагается внедрение серверного кэширования как следующего шага.
   - Для корректной работы потребуется кэширование полного списка заказов, так как интерфейс строится на основе полного набора данных, а фильтры применяются уже на фронтенде.

---

### Предлагаемое решение

#### **Серверное кэширование**

1. **Паттерны кэширования:**
   - **Read-Through:** 
     - Все запросы на чтение проходят через кэш. Если данные отсутствуют, они запрашиваются из базы данных и сохраняются в кэше для последующих обращений.
   - **Write-Through:** 
     - Запросы на запись обновляют кэш и базу данных одновременно, что обеспечивает синхронность данных.

2. **Инвалидация кэша:**
   - Используется инвалидация, основанная на запросах:
     - Кэш обновляется при изменении данных (например, смена статуса заказа, завершение работы оператора).
     - Это позволяет поддерживать актуальность данных, даже при высокой динамике изменений.

3. **Архитектура кэширования:**
   - Для реализации серверного кэширования предлагается использовать Redis как инструмент, обеспечивающий высокую производительность и надежность.

4. **Преимущества:**
   - Быстрое извлечение данных для отображения.
   - Минимизация обращений к базе данных.

---

### Альтернативные решения

#### **Клиентское кэширование**

**Описание:**
- HTTP-кэширование выполняется на стороне браузера. Это снижает нагрузку на сервер, так как часто используемые данные сохраняются локально.

**Особенности:**
- Все HTTP-запросы сначала проверяют кэш браузера, чтобы определить, существует ли актуальный ответ.
- Если данные в кэше устарели, сервер отправляет обновленный ответ.

**Рекомендации:**
- Использование заголовков `no-cache` для проверки актуальности данных.
- Применение механизма `If-Modified-Since` для проверки времени последнего изменения ресурса.

**Когда использовать:**
- В случаях, когда интерфейс уже оптимизирован для работы с фильтрацией данных.
- Если пользовательский интерфейс может обрабатывать ограниченные наборы данных.

**Проблемы:**
- Возможность отображения устаревших данных, особенно при высокой динамике заказов.
- Ограниченная гибкость в условиях сложных сценариев фильтрации.

---

### Стратегия тестирования кэширования

1. **Проверка производительности интерфейса:**
   - На производственном окружении протестировать скорость загрузки и формирования списка заказов.
   - Убедиться, что интерфейс может корректно отображать увеличенные объемы данных.

2. **Сравнение подходов:**
   - Серверное кэширование (Redis) vs клиентское кэширование (HTTP-кэширование).
   - Оценить, какой подход обеспечивает лучшую производительность и актуальность данных.

3. **Сбор обратной связи:**
   - Провести анализ результатов тестирования, собрать данные о проблемных местах и деталях работы интерфейса.

---

### Политика безопасности

1. **Контроль доступа:**
   - Доступ к данным в кэше должен быть ограничен только сервисной службой и администраторами.
2. **Сохранение конфиденциальности:**
   - Кэш не должен содержать персональные данные пользователей.
3. **Аутентификация и авторизация:**
   - Использование Active Directory или аналогичных решений для управления доступом.

---

### Политика хранения данных в кэше

1. **Срок хранения:**
   - В зависимости от критичности данных:
     - Оперативные данные (например, списки заказов) — короткий срок хранения (несколько часов).
     - Статистические данные — более длительный срок.

2. **Очистка устаревших данных:**
   - Настроить автоматическую очистку устаревших данных в Redis с использованием механизмов TTL (Time-To-Live).

---

### Заключение

Кэширование, независимо от выбранного подхода, поможет значительно повысить производительность системы, особенно MES, и снизить нагрузку на базу данных. Наиболее эффективным в данном случае будет использование серверного кэширования с паттернами Read-Through и Write-Through. Однако для окончательного выбора подхода необходимо провести тестирование на производственном окружении и учесть результаты анализа.